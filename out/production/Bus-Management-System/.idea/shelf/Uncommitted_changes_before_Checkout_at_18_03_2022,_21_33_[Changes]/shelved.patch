Index: main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import edu.princeton.cs.algs4.DirectedEdge;\nimport edu.princeton.cs.algs4.EdgeWeightedDigraph;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\n\npublic class main {\n\n    public static void main(String[] args) throws IOException {\n\n        Scanner sr = new Scanner(new File(\"stops.txt\"));\n\n        sr.nextLine();\n        List<Integer> stops = new ArrayList<>();\n\n        while(sr.hasNext()){\n            int stop = (Integer.parseInt(sr.nextLine().split(\",\")[0]));\n            if (!stops.contains(stop)) {\n                stops.add(stop);\n            }\n        }\n\n        Collections.sort(stops);\n\n        EdgeWeightedDigraph graph = new EdgeWeightedDigraph(stops.get(stops.size() - 1) + 1);\n        sr = new Scanner(new File(\"transfers.txt\"));\n        sr.nextLine();\n\n        // Add edges from transfers.txt with associated weights\n        while(sr.hasNextLine()) {\n            String[] values = sr.nextLine().split(\",\");\n            if(values[2].equals(\"0\"))\n                graph.addEdge(new DirectedEdge(Integer.parseInt(values[0]), Integer.parseInt(values[1]), 2));\n            else\n                graph.addEdge(new DirectedEdge(Integer.parseInt(values[0]), Integer.parseInt(values[1]), Integer.parseInt(values[3]) / 100));\n        }\n\n        sr = new Scanner(new File(\"stop_times.txt\"));\n        sr.nextLine();\n\n        int tripID = -1;\n        int pastStop = -1;\n        while(sr.hasNextLine()) {\n            String[] values = sr.nextLine().split(\",\");\n            if(Integer.parseInt(values[0]) != tripID){\n                tripID = Integer.parseInt(values[0]);\n                pastStop = Integer.parseInt(values[3]);\n            }\n            else {\n                graph.addEdge(new DirectedEdge(pastStop, Integer.parseInt(values[3]), 1));\n                pastStop = Integer.parseInt(values[3]);\n            }\n        }\n\n        System.out.println(graph.toString());\n\n\n\n\n\n    }\n}\n\n
===================================================================
diff --git a/main.java b/main.java
--- a/main.java	
+++ b/main.java	
@@ -1,14 +1,31 @@
 import edu.princeton.cs.algs4.DirectedEdge;
 import edu.princeton.cs.algs4.EdgeWeightedDigraph;
+import edu.princeton.cs.algs4.FloydWarshall;
 
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.util.*;
 
 public class main {
 
+    private EdgeWeightedDigraph graph;
+    private static int[][] adjMatrix;
+
     public static void main(String[] args) throws IOException {
+        createGraph();
+
+        Iterable<DirectedEdge> shortestPath = FloydWarshall.
+
+        System.out.println(graph.toString());
+
 
+
+
+
+    }
+
+    private static void createGraph() throws FileNotFoundException {
         Scanner sr = new Scanner(new File("stops.txt"));
 
         sr.nextLine();
@@ -24,6 +41,7 @@
         Collections.sort(stops);
 
         EdgeWeightedDigraph graph = new EdgeWeightedDigraph(stops.get(stops.size() - 1) + 1);
+        adjMatrix = new int[stops.size() - 1][stops.size() - 1];
         sr = new Scanner(new File("transfers.txt"));
         sr.nextLine();
 
@@ -45,20 +63,12 @@
             String[] values = sr.nextLine().split(",");
             if(Integer.parseInt(values[0]) != tripID){
                 tripID = Integer.parseInt(values[0]);
-                pastStop = Integer.parseInt(values[3]);
             }
             else {
                 graph.addEdge(new DirectedEdge(pastStop, Integer.parseInt(values[3]), 1));
-                pastStop = Integer.parseInt(values[3]);
-            }
+            }
+            pastStop = Integer.parseInt(values[3]);
         }
-
-        System.out.println(graph.toString());
-
-
-
-
-
     }
 }
 
